<?xml version="1.0" encoding="UTF-8"?>

<!--
param:
lower -> 小写
upper -> 大写




xml字符转义:
&amp;        &
&lt;         <
&gt;         >
&quot;       "
&apos;       '
-->



<!-------------->
<!-- 基础数据 -->
<!-------------->

<class type="class">

	<!------------>
	<!--基本属性-->
	<!------------>
	<base name="class_name"       attr="name"/>
	<base name="class_name_lower" attr="name" param="lower"/>
	<base name="class_name_upper" attr="name" param="upper"/>
	<base name="class_comment"    attr="comment"/>


	<!-------->
	<!--父类-->
	<!-------->
	<parent name="parent_include">
#include "#parent##class_name#.h"
	</parent>
	<parent name="parent_inherit">
:public #parent##class_name#
	</parent>

	<parent name="parent_init_implement">
	if(!#parent##class_name#::Init())
		return false;
	</parent>

	<parent name="parent_init_self_implement">
	if(!#parent##class_name#::Init(o#class_name#))
		return false;
	</parent>

	<!---------->
	<!--宏定义-->
	<!---------->
	<list name="macro">
		<base name="macro_name" attr="name"/>
		<base name="macro_value" attr="value"/>
		<base name="macro_comment" attr="comment"/>
	</list>

	<!-- 宏定义 -->
	<compose name="compose_macro" ref="macro" gap="">

/*&lt;! #macro_comment#*/
#define #macro_name# #macro_value#

	</compose>

	<!------------>
	<!--全局定义-->
	<!------------>
	<list name="globle">
		<base name="globle_name"    attr="name"/>
		<base name="globle_prefix"  attr="prefix"/>
		<base name="globle_type"    attr="type"/>
		<base name="globle_default" attr="default"/>
		<base name="globle_comment" attr="comment"/>
	</list>

	<!-- 全局变量定义 -->
	<compose name="compose_globle" ref="globle" gap="">

/*&lt;! #globle_comment#*/
static #globle_type# g_#globle_prefix##globle_name# = #globle_default#;

	</compose>

	
	<!---------------->
	<!--基本成员变量-->
	<!---------------->
	<list name="property">
		<base name="property_name"       attr="name"/>
		<base name="property_prefix"     attr="prefix"/>
		<base name="property_type"       attr="type"/>
		<base name="property_default"    attr="default" default="0"/>
		<base name="property_comment"    attr="comment"/>
	</list>

	<!-- Get函数 -->
	<compose name="compose_property_get" ref="property" gap="">

	/**
	 * @brief 获取#property_comment#
	 */
	inline const #property_type# Get#property_name#() const{return m_#property_prefix##property_name#;}

	</compose>

	<!-- Set函数 -->
	<compose name="compose_property_set" ref="property" gap="">
	
	/**
	 * @brief 设置#property_comment#
	 */
	inline void Set#property_name#(const #property_type# #property_prefix##property_name#){m_#property_prefix##property_name# = #property_prefix##property_name#;}

	</compose>

	<!-- 成员变量声明 -->
	<compose name="compose_property_declaration" ref="property" gap="">

	/*&lt;! #property_comment#*/
	#property_type# m_#property_prefix##property_name#;

	</compose>

	<!-- 空构造函数的初始化列表 -->
	<compose name="compose_create_implement" ref="property" gap=",">
	m_#property_prefix##property_name#(#property_default#)

	</compose>

	<!-- 空init函数的赋值 -->
	<compose name="compose_init_implement" ref="property" gap="">
	
	m_#property_prefix##property_name# = #property_default#;

	</compose>

	<!-- 拷贝init函数的赋值 -->
	<compose name="compose_init_self_implement" ref="property" gap="">

	m_#property_prefix##property_name# = o#class_name#.m_#property_prefix##property_name#;

	</compose>

	<!------------------>
	<!--字符串成员变量-->
	<!------------------>
	<list name="string_property">
		<base name="string_property_name"    attr="name"/>
		<base name="string_property_max"     attr="max"/>
		<base name="string_property_comment" attr="comment"/>
	</list>
	
	<!--申明-->
	<compose name="compose_string_property_declaration" ref="string_property" gap="">
	
	/*&lt;! #string_property_comment#*/
	char m_s#string_property_name#[#string_property_max#];
	/*&lt;! #string_property_comment#长度*/
	int m_i#string_property_name#Len;
	
	</compose>
	
	<!--初始化-->
	<compose name="compose_string_property_init_implement" ref="string_property" gap="">
	
	m_i#string_property_name#Len = 0;
	memset(m_s#string_property_name#, 0, #string_property_max#);
	
	</compose>
	
	
	<!--Get函数-->
	<compose name="compose_string_property_get" ref="string_property" gap="">
	
	/**
	 * @brief 获取#string_property_comment#
	 */
	const char *Get#string_property_name#() const;
	
	/**
	 * @brief 获取#string_property_comment长度#
	 */
	const int Get#string_property_name#Len() const;
	
	</compose>
	<!--Get函数-->
	<compose name="compose_string_property_get_implement" ref="string_property" gap="">

const char *#class_name#::Get#string_property_name#() const
{
	return m_s#string_property_name#;
}
	
const int #class_name#::Get#string_property_name#Len() const
{
	return m_i#string_property_name#Len;
}

	</compose>
	
	<!--Set函数-->
	<compose name="compose_string_property_set" ref="string_property" gap="">
	
	/**
	 * @brief 设置#string_property_comment#
	 */
	bool Set#string_property_name#(const char *p#string_property_name#, const int iLen);
	
	</compose>
	<!--Set函数-->
	<compose name="compose_string_property_set_implement" ref="string_property" gap="">

bool #class_name#::Set#string_property_name#(const char *p#string_property_name#, const int iLen)
{
	if (p#string_property_name# == NULL || iLen &gt;= #string_property_max#)
		return false;
		
	memcpy(m_s#string_property_name#, p#string_property_name#, iLen);
	m_i#string_property_name#Len = iLen;
	
	return true;
}

	</compose>
	
	<!---------------->
	<!--数组成员变量-->
	<!---------------->
	<list name="struct_array_property">
		<base name="struct_array_property_name"    attr="name"/>
		<base name="struct_array_property_type"    attr="type"/>
		<base name="struct_array_property_max"     attr="max"/>
		<base name="struct_array_property_comment" attr="comment"/>
		<list name="struct">
			<base name="struct_name" attr="name"/>
			<base name="struct_comment" attr="comment"/>
			<list name="property">
				<base name="property_name" attr="name"/>
				<base name="property_prefix" attr="prefix"/>
				<base name="property_type" attr="type"/>
				<base name="property_default" attr="default"/>
				<base name="property_comment" attr="comment"/>
			</list>
			<compose name="array_property_struct_property_get" ref="property" gap="">

	/**
	 * @brief 获取#property_comment#
	 */
	#property_type# Get#struct_array_property_name##property_name#(const int iIndex) const;

			</compose>
			<compose name="array_property_struct_property_get_implement" ref="property" gap="">

#property_type# #class_name#::Get#struct_array_property_name##property_name#(const int iIndex) const
{
	if (iIndex &lt; m_i#struct_array_property_name#Ref &amp;&amp; iIndex >= 0) 
		return m_ast#struct_array_property_name#[iIndex].#property_prefix##property_name#;

	return #property_default#;
}
			</compose>
			
			<compose name="array_property_struct_property_declaration" ref="property" gap="">

		/*&lt;! #property_comment#*/
		#property_type# #property_prefix##property_name#;

			</compose>
		</list>
		
		<compose name="array_property_struct_get" ref="struct" gap="">

		#array_property_struct_property_get#
		
		</compose>
		<compose name="array_property_struct_get_implement" ref="struct" gap="">

		#array_property_struct_property_get_implement#
		
		</compose>
		
		<compose name="array_property_struct_declaration" ref="struct" gap="">

	/**
	 * @brief #struct_comment#
	 */
	struct #struct_array_property_name#
	{#array_property_struct_property_declaration#
	};

		</compose>
	</list>

	<!-- 结构申明 -->
	<compose name="array_property_declaration" ref="struct_array_property" gap="">

	#array_property_struct_declaration#

	</compose>
	<!-- 成员变量声明 -->
	<compose name="compose_array_property_declaration" ref="struct_array_property" gap="">

	/*&lt;! #struct_array_property_comment#*/
	#struct_array_property_type# m_ast#struct_array_property_name#[#struct_array_property_max#];
	/*&lt;! #struct_array_property_comment#数量*/
	int m_i#struct_array_property_name#Ref;

	</compose>

	<!-- GetNum函数 -->
	<compose name="compose_array_property_get_num" ref="struct_array_property" gap="">

	/**
	 * @brief 获取#struct_array_property_comment#数量
	 */
	int Get#struct_array_property_name#Num() const;

	</compose>

	<!-- GetNum函数 -->
	<compose name="compose_array_property_get_num_implement" ref="struct_array_property" gap="">
	
int #class_name#::Get#struct_array_property_name#Num() const
{
	return m_i#struct_array_property_name#Ref;
}

	</compose>

	<!-- Get函数 -->
	<compose name="compose_array_property_get" ref="struct_array_property" gap="">

	/**
	 * @brief 获取#struct_array_property_comment#
	 */
	bool Get#struct_array_property_name#(const int iIndex, #struct_array_property_type# &amp;st#struct_array_property_name#) const;

	</compose>


	<!-- Get函数实现 -->
	<compose name="compose_array_property_get_implement" ref="struct_array_property" gap="">

bool #class_name#::Get#struct_array_property_name#(const int iIndex, #struct_array_property_type# &amp;st#struct_array_property_name#) const
{
	if(iIndex &lt; 0 || iIndex &gt;= m_i#struct_array_property_name#Ref)
		return false;

	st#struct_array_property_name# = m_ast#struct_array_property_name#[iIndex];
	return true;
}

	</compose>
	
	<!-- Get函数 -->
	<compose name="compose_array_struct_get" ref="struct_array_property" gap="">
#array_property_struct_get#
	</compose>
	<!-- Get函数实现 -->
	<compose name="compose_array_struct_get_implement" ref="struct_array_property" gap="">
#array_property_struct_get_implement#
	</compose>

	<!-- Add函数 -->
	<compose name="compose_add" ref="struct_array_property" gap="">

	/**
	 * @brief 添加#struct_array_property_comment#
	 */
	bool Add#struct_array_property_name#(const #struct_array_property_type# &amp;st#struct_array_property_name#);

	</compose>

	<!-- Add函数实现 -->
	<compose name="compose_add_implement" ref="struct_array_property" gap="">

bool #class_name#::Add#struct_array_property_name#(const #struct_array_property_type# &amp;st#struct_array_property_name#)
{
	if(m_i#struct_array_property_name#Ref &gt;= #struct_array_property_max#)
		return false;
		
	m_ast#struct_array_property_name#[m_i#struct_array_property_name#Ref++] = st#struct_array_property_name#;
	return true;
}

	</compose>

	<!-- Remove函数 -->
	<compose name="compose_remove" ref="struct_array_property" gap="">

	/**
	 * @brief 移除#struct_array_property_comment#
	 */
	bool Remove#struct_array_property_name#(const int iIndex);

	</compose>

	<!-- Remove函数实现 -->
	<compose name="compose_remove_implement" ref="struct_array_property" gap="">
	
bool #class_name#::Remove#struct_array_property_name#(const int iIndex)
{
	if(iIndex &lt; 0 || iIndex &gt;= m_i#struct_array_property_name#Ref)
		return false;

	--m_i#struct_array_property_name#Ref;
	
	for (int i = iIndex; i &lt; m_i#struct_array_property_name#Ref; ++i)
		m_ast#struct_array_property_name#[i] = m_ast#struct_array_property_name#[i+1];

	return true;
}

	</compose>

	<!-- 空构造函数的初始化列表 -->
	<compose name="compose_init_ref_implement" ref="struct_array_property" gap="">

	m_i#struct_array_property_name#Ref = 0;

	</compose>
	<!-- 空构造函数的初始化列表 -->
	<compose name="compose_init_array_implement" ref="struct_array_property" gap="">

	memset(m_ast#struct_array_property_name#, 0, sizeof(#struct_array_property_type#)*#struct_array_property_max#);

	</compose>
	<!-- init函数 -->
	<compose name="compose_init_self_array_implement" ref="struct_array_property" gap="">

	memcpy(m_ast#struct_array_property_name#, o#class_name#.m_ast#struct_array_property_name#, sizeof(#struct_array_property_type#)*o#class_name#.m_i#struct_array_property_name#Ref);
	
	m_i#struct_array_property_name#Ref = o#class_name#.m_i#struct_array_property_name#Ref;

	</compose>

	
	<!---------------->
	<!--枚举数据结构-->
	<!---------------->
	<list name="enum">    
		<base name="enum_name" attr="name"/>
		<base name="enum_comment" attr="comment"/>
		<list name="property">
			<base name="enum_property_name"    attr="name"/>
			<base name="enum_property_value"   attr="value"/>
			<base name="enum_property_comment" attr="comment"/>
		</list>
		
		<compose name="declare_enum_property" ref="property" gap="">

		/*&lt;! #enum_property_comment#*/
		#enum_property_name# = #enum_property_value#,

		</compose>
	</list>

	<compose name="inner_enum_list" ref="enum" gap="">
	/**
	 * @brief #enum_comment#
	 */
	enum #enum_name#
	{#declare_enum_property#
	};

	</compose>
</class>

<!-------------->
<!-- 生成文件 -->
<!-------------->
<file file="#class_name#.h">
#ifndef __#class_name_upper#_H__
#define __#class_name_upper#_H__

#include &lt;string&gt;

#parent_include#

#compose_macro#

#compose_globle#

using std::string;

/**
 * @brief #class_comment#
 */
class #class_name# #parent_inherit#
{
public:
    #class_name#();
    ~#class_name#();
public:
    /**
     * @brief 空对象
     */
    static const #class_name# &amp;GetNo#class_name#();
public:
#inner_enum_list#
#array_property_declaration#
public:
    /**
     * @brief 初始化
     */
    virtual bool Init();
    
    /**
     * @brief 初始化
     */
    virtual bool Init(const #class_name# &amp;o#class_name#);
    
    /**
     * @brief 字符串化
     */
    virtual string ToString()const;
    
    /**
     * @brief 反字符串化
     */
    virtual bool FromString(const string sBuffer);

public:    
#compose_property_get#
#compose_property_set#
#compose_string_property_get#
#compose_string_property_set#
#compose_array_property_get_num#
#compose_array_property_get#
#compose_add#
#compose_remove#
#compose_array_struct_get#
private:  
#compose_property_declaration#
#compose_string_property_declaration#
#compose_array_property_declaration#
};

#endif //__#class_name_upper#_H__
</file>


<!-- 生成文件 -->
<file file="#class_name#.cpp">
#include &quot;#class_name#.h&quot;

#class_name#::#class_name#()
:#compose_create_implement#
{
#compose_string_property_init_implement#
#compose_init_ref_implement#
#compose_init_array_implement#
}

#class_name#::~#class_name#()
{

}

const #class_name# &amp;#class_name#::GetNo#class_name#()
{
	static #class_name# o#class_name#;
	return o#class_name#;
}

bool #class_name#::Init()
{#parent_init_implement#
#compose_init_implement#
#compose_string_property_init_implement#
#compose_init_ref_implement#
#compose_init_array_implement#

    return true;
}

bool #class_name#::Init(const #class_name# &amp;o#class_name#)
{#parent_init_self_implement#
#compose_init_self_implement#
#compose_init_self_array_implement#
    return true;
}

string #class_name#::ToString()const
{
    char csBuffer[10240] = {&apos;\0&apos;};
    return csBuffer;
}

bool #class_name#::FromString(const string sBuffer)
{
    return true;
}
#compose_string_property_get_implement#
#compose_string_property_set_implement#
#compose_array_property_get_num_implement#
#compose_array_property_get_implement#

#compose_add_implement#
#compose_remove_implement#

#compose_array_struct_get_implement#
</file>
