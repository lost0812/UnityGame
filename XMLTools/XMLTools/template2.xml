<?xml version="1.0" encoding="UTF-8"?>

<!--
param:
lower -> 小写
upper -> 大写
list  -> 数组（必定有gap属性）




xml字符转义:
&amp;	     &
&lt;	     <
&gt;	     >
&quot;	   "
&apos;     '
-->



<!-------------->
<!-- 基础数据 -->
<!-------------->

<class type="class">

<base name="class_name"       attr="name"/>
<base name="class_name_lower" attr="name" param="lower"/>
<base name="class_name_upper" attr="name" param="upper"/>
<base name="class_comment"    attr="comment"/>

<property>
	<base name="property_name"       attr="name"/>
	<base name="property_prefix"     attr="prefix"/>
	<base name="property_type"       attr="type"/>
	<base name="property_default"    attr="default" default="0"/>
	<base name="property_comment"    attr="comment"/>
</property>

<!-- init函数的参数列表 -->
<compose name="compose_init_arg" ref="property" gap=",">
const #property_type# #property_prefix##property_name#
</compose>

<!-- Get函数 -->
<compose name="compose_get" ref="property" gap="">
    /**
		 * @brief 获取#property_comment#
		 */
    inline const #property_type# Get#property_name#() const{return m_#property_prefix##property_name#;}

</compose>

<!-- Set函数 -->
<compose name="compose_set" ref="property" gap="">
    /**
		 * @brief 设置#property_comment#
		 */
    inline void Set#property_name#(const #property_type# #property_prefix##property_name#){m_#property_prefix##property_name# = #property_prefix##property_name#;}

</compose>

<!-- 成员变量声明 -->
<compose name="compose_property_declaration" ref="property" gap="">
    /*&lt;! #property_comment#*/
    #property_type# m_#property_prefix##property_name#;

</compose>

<!-- 空构造函数的初始化列表 -->
<compose name="compose_create_implement" ref="property" gap=",">
m_#property_prefix##property_name#(#property_default#)

</compose>

<!-- 空init函数的赋值 -->
<compose name="compose_init_implement" ref="property" gap="">
    m_#property_prefix##property_name# = #property_default#;

</compose>

<!-- 拷贝init函数的赋值 -->
<compose name="compose_init_self_implement" ref="property" gap="">
    m_#property_prefix##property_name# = o#class_name#.m_#property_prefix##property_name#;

</compose>

<!-- 参数init函数的赋值 -->
<compose name="compose_init_arg_implement" ref="property" gap="">
    m_#property_prefix##property_name# = #property_prefix##property_name#;

</compose>

<parent name="parent_inherit">
:public #parent##class_name#
</parent>

<parent name="parent_init_implement">
    if(!#parent##class_name#::Init())
        return false;
</parent>

<parent name="parent_init_self_implement">
    if(!#parent##class_name#::Init(&amp;o#class_name#))
        return false;
</parent>
<enum>	
	<base name="enum_name" attr="name"/>
	<base name="enum_comment" attr="comment"/>
	<property>
		<base name="enum_property_name"    attr="name"/>
		<base name="enum_property_value"   attr="value"/>
		<base name="enum_property_comment" attr="comment"/>
	</property>
	
	<compose name="declare_enum_property" ref="property" gap=",">

        /*&lt;! #enum_property_comment#*/
        #enum_property_name# = #enum_property_value#
	</compose>
</enum>

<compose name="inner_enum_list" ref="enum" gap="">
	/**
	 * @brief #enum_comment#
	 */
	enum #enum_name#
  {#declare_enum_property#
  };

</compose>


<struct>
	<base name="struct_name" attr="name"/>
	<base name="struct_comment" attr="comment"/>
	<property>
		<base name="struct_property_name"  attr="name"/>
		<base name="struct_property_type" attr="type"/>
		<base name="struct_property_comment" attr="comment"/>
	</property>
	<compose name="declare_struct_property" ref="property" gap="">

        /*&lt;! #struct_property_comment#*/
        #struct_property_type# #struct_property_name#;
	</compose>
</struct>

<compose name="inner_struct_list" ref="struct" gap="">
	/**
	 * @brief #struct_comment#
	 */
  struct #struct_name#
  {#declare_struct_property#
  };

</compose>

</class>

<!-------------->
<!-- 生成文件 -->
<!-------------->
<cpp_head type="file" file="#class_name#.h">
#ifndef __#class_name_upper#_H__
#define __#class_name_upper#_H__

#include &lt;string&gt;

using std::string;

/**
 * @brief #class_comment#
 */
class #class_name# #parent_inherit#
{
public:
    #class_name#();
    ~#class_name#();
public:
		/**
		 * @brief 空对象
		 */
    static const #class_name# &amp;GetNo#class_name#();
public:
#inner_enum_list#
public:
    /**
		 * @brief 初始化
		 */
    virtual bool Init();
    
    /**
		 * @brief 初始化
		 */
    virtual bool Init(const #class_name# &amp;o#class_name#);
    
    /**
		 * @brief 初始化
		 */
    virtual bool Init(#compose_init_arg#);

    /**
		 * @brief 字符串化
		 */
    virtual string ToString()const;
    /**
		 * @brief 反字符串化
		 */
    virtual bool FromString(const string sBuffer);

public:    
#compose_get#
#compose_set#
private:  
#compose_property_declaration#  
};  
  
#endif //__#class_name_upper#_H__
</cpp_head>


<!-- 生成文件 -->
<cpp_source type="file" file="#class_name#.cpp">
#include &quot;#class_name#.h&quot;

#class_name#::#class_name#()
:#compose_create_implement#  
{  
  
}  
  
#class_name#::~#class_name#()  
{  
  
}  
  
bool #class_name#::Init()  
{
#parent_init_implement#
#compose_init_implement#
    return true;  
}  
  
bool #class_name#::Init(const #class_name# &amp;o#class_name#)  
{  
#parent_init_self_implement#
#compose_init_self_implement#
    return true;  
}  
      
bool #class_name#::Init(#compose_init_arg#)  
{  
#compose_init_arg_implement#
    return true;  
}  
      
string #class_name#::ToString()const
{  
    char csBuffer[10240] = {&apos;\0&apos;};  
    return csBuffer;  
}  
  
bool #class_name#::FromString(const string sBuffer)
{  
    return true;  
}  
  
</cpp_source>
